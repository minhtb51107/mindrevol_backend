// Khai b√°o package v√† import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
package com.example.demo.controller.auth;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.auth.LoginRequest;
import com.example.demo.dto.auth.RegisterRequest;
import com.example.demo.model.auth.User;
import com.example.demo.model.auth.VerificationCode;
import com.example.demo.repository.auth.UserRepository;
import com.example.demo.repository.auth.VerificationCodeRepository;
import com.example.demo.util.JwtUtil;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;

// Cho ph√©p truy c·∫≠p t·ª´ domain frontend (React/Vue.js th∆∞·ªùng ch·∫°y ·ªü port 5173)
@CrossOrigin(origins = "http://localhost:5173", allowCredentials = "true")
// ƒê√°nh d·∫•u ƒë√¢y l√† controller x·ª≠ l√Ω REST API
@RestController
// Base path cho t·∫•t c·∫£ endpoint trong controller n√†y
@RequestMapping("/api/auth")
// T·ª± ƒë·ªông t·∫°o constructor v·ªõi c√°c tham s·ªë final
@RequiredArgsConstructor
public class AuthController {

    // Inject c√°c dependency c·∫ßn thi·∫øt th√¥ng qua constructor
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final VerificationCodeRepository verificationCodeRepository;
    private final JwtUtil jwtUtil;
    private final JavaMailSender mailSender;

    // Endpoint g·ª≠i m√£ x√°c minh qua email
    @PostMapping("/send-code")
    public ResponseEntity<?> sendVerificationCode(@RequestBody Map<String, String> request) {
        // L·∫•y email t·ª´ request body
        String email = request.get("email");
        // Ki·ªÉm tra email c√≥ h·ª£p l·ªá kh√¥ng
        if (email == null || email.isBlank()) {
            return ResponseEntity.badRequest().body("Email kh√¥ng h·ª£p l·ªá");
        }

        // T·∫°o m√£ x√°c minh ng·∫´u nhi√™n 6 ch·ªØ s·ªë
        String code = String.format("%06d", new Random().nextInt(999999));

        // T·∫°o ƒë·ªëi t∆∞·ª£ng VerificationCode v√† l∆∞u v√†o database
        VerificationCode verificationCode = VerificationCode.builder()
            .email(email)
            .code(code)
            .createdAt(LocalDateTime.now())
            .build();
        verificationCodeRepository.save(verificationCode);

        try {
            // T·∫°o v√† c·∫•u h√¨nh email
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setTo(email);
            helper.setSubject("M√£ x√°c minh ƒëƒÉng k√Ω t√†i kho·∫£n");
            // N·ªôi dung email v·ªõi m√£ x√°c minh (ƒë·ªãnh d·∫°ng HTML)
            helper.setText("M√£ x√°c minh c·ªßa b·∫°n l√†: <b>" + code + "</b>", true);
            // G·ª≠i email
            mailSender.send(message);
        } catch (MessagingException e) {
            // X·ª≠ l√Ω l·ªói g·ª≠i email
            return ResponseEntity.status(500).body("L·ªói g·ª≠i email: " + e.getMessage());
        }

        // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
        return ResponseEntity.ok("ƒê√£ g·ª≠i m√£ x√°c minh ƒë·∫øn email.");
    }

    // Endpoint ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi
    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody RegisterRequest request) {
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (userRepository.findByEmail(request.getEmail()).isPresent()) {
            return ResponseEntity.badRequest().body("Email ƒë√£ t·ªìn t·∫°i");
        }

        // L·∫•y m√£ x√°c minh m·ªõi nh·∫•t cho email t·ª´ database
        Optional<VerificationCode> codeOpt = verificationCodeRepository.findTopByEmailOrderByCreatedAtDesc(request.getEmail());

        // Ki·ªÉm tra m√£ x√°c minh c√≥ h·ª£p l·ªá kh√¥ng
        if (codeOpt.isEmpty() || !codeOpt.get().getCode().equals(request.getVerificationCode())) {
            return ResponseEntity.badRequest().body("M√£ x√°c minh kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n");
        }

        // T·∫°o user m·ªõi v√† l∆∞u v√†o database
        User user = new User();
        user.setEmail(request.getEmail());
        // M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setFullName(request.getFullName());
        user.setAge(request.getAge());
        user.setRegisteredAt(LocalDateTime.now());
        userRepository.save(user);

        // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
        return ResponseEntity.ok("ƒêƒÉng k√Ω th√†nh c√¥ng");
    }

    // Endpoint ƒëƒÉng nh·∫≠p b·∫±ng email v√† m·∫≠t kh·∫©u
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        return userRepository.findByEmail(request.getEmail())
            .map(user -> {
                if (passwordEncoder.matches(request.getPassword(), user.getPassword())) {
                    String token = jwtUtil.generateToken(user.getEmail());
                    // Tr·∫£ v·ªÅ JSON object thay v√¨ ch·ªâ token
                    Map<String, String> response = new HashMap<>();
                    response.put("token", token);
                    response.put("message", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng");
                    return ResponseEntity.ok(response);
                } else {
                    return ResponseEntity.status(401).body("Sai m·∫≠t kh·∫©u");
                }
            })
            .orElseGet(() -> ResponseEntity.status(404).body("Email kh√¥ng t·ªìn t·∫°i"));
    }

    // Endpoint ƒëƒÉng nh·∫≠p b·∫±ng Google
 // Endpoint ƒëƒÉng nh·∫≠p b·∫±ng Google
    @PostMapping("/login/google")
    public ResponseEntity<?> googleLogin(@RequestBody Map<String, String> request) {
        System.out.println("\nüî• ===== /api/auth/login/google CALLED =====");
        
        // üîç LOG 1: Ki·ªÉm tra request body
        System.out.println("üì¶ Full request body: " + request);
        
        // L·∫•y Google ID token t·ª´ request
        String idToken = request.get("idToken");
        
        // üîç LOG 2: Ki·ªÉm tra idToken t·ª´ client
        System.out.println("üìã idToken from client: " + (idToken != null ? 
            "PRESENT (length: " + idToken.length() + ")" : "NULL OR MISSING!"));
        
        if (idToken != null && idToken.length() > 100) {
            System.out.println("üîç idToken preview: " + idToken.substring(0, 50) + "..." + idToken.substring(idToken.length() - 20));
        }

        // T·∫°o Google ID token verifier v·ªõi client ID c·ªßa ·ª©ng d·ª•ng
        GoogleIdTokenVerifier verifier = new GoogleIdTokenVerifier
            .Builder(new NetHttpTransport(), new JacksonFactory())
            .setAudience(Collections.singletonList("758520677856-j98pg9k2fju9545q0ffffmsnr9b1qtk9.apps.googleusercontent.com"))
            .build();

        try {
            // üîç LOG 3: Tr∆∞·ªõc khi verify v·ªõi Google
            System.out.println("üîÑ Verifying Google ID token...");
            
            // X√°c minh Google ID token
            GoogleIdToken token = verifier.verify(idToken);
            
            if (token != null) {
                System.out.println("‚úÖ Google ID token verification SUCCESSFUL");
                
                // L·∫•y th√¥ng tin t·ª´ token
                GoogleIdToken.Payload payload = token.getPayload();
                String email = payload.getEmail();
                String name = (String) payload.get("name");

                // üîç LOG 4: Th√¥ng tin user t·ª´ Google
                System.out.println("üë§ User info from Google - Email: " + email + ", Name: " + name);

                // T√¨m user trong database ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
                User user = userRepository.findByEmail(email).orElseGet(() -> {
                    System.out.println("‚û°Ô∏è User not found, creating new user...");
                    User newUser = new User();
                    newUser.setEmail(email);
                    newUser.setFullName(name);
                    newUser.setPassword(""); // Kh√¥ng c·∫ßn m·∫≠t kh·∫©u cho ƒëƒÉng nh·∫≠p Google
                    newUser.setRegisteredAt(LocalDateTime.now());
                    User savedUser = userRepository.save(newUser);
                    System.out.println("‚úÖ New user created: " + savedUser.getEmail());
                    return savedUser;
                });

                System.out.println("‚úÖ User resolved: " + user.getEmail());
                
                // üîç LOG 5: Tr∆∞·ªõc khi t·∫°o JWT
                System.out.println("üõ†Ô∏è Generating JWT token...");
                
                // T·∫°o JWT token cho user
                String jwt = jwtUtil.generateToken(user.getEmail());
                
                // üîç LOG 6: Ki·ªÉm tra JWT token ƒë∆∞·ª£c t·∫°o ra
                System.out.println("‚úÖ JWT token generated: '" + jwt + "'");
                System.out.println("üìè JWT token length: " + jwt.length());
                int dotCount = jwt.length() - jwt.replace(".", "").length();
                System.out.println("üî¢ Number of '.' in JWT: " + dotCount);
                
                // Tr·∫£ v·ªÅ JSON object
                Map<String, String> response = new HashMap<>();
                response.put("token", jwt);
                response.put("message", "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng");
                
                System.out.println("üì§ Response to client: " + response);
                System.out.println("üî• ===== /api/auth/login/google COMPLETED =====\n");
                return ResponseEntity.ok(response);
                
            } else {
                // Token kh√¥ng h·ª£p l·ªá
                System.err.println("‚ùå Google ID token verification FAILED: Token is null");
                return ResponseEntity.status(401).body("Token kh√¥ng h·ª£p l·ªá");
            }
        } catch (Exception e) {
            // X·ª≠ l√Ω l·ªói x√°c minh token
            System.err.println("‚ùå EXCEPTION during Google token verification: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(401).body("L·ªói x√°c minh Google ID token: " + e.getMessage());
        }
    }
}