package com.example.demo.config;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
//import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;

import com.example.demo.security.JwtAuthFilter;
import com.example.demo.security.MyUserDetailsService;
import com.example.demo.util.JwtUtil;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Configuration
@EnableWebSecurity
@Profile("!eval") // ‚úÖ S·ª¨A L·ªñI: Th√™m annotation n√†y
public class SecurityConfig {

    private final JwtUtil jwtUtil;
    private final MyUserDetailsService myUserDetailsService;
    private final JwtAuthFilter jwtAuthenticationFilter;
    private final AuthenticationProvider authenticationProvider;


    @Autowired
    private JwtAuthFilter jwtAuthFilter;


    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // V√¥ hi·ªáu h√≥a CSRF (th∆∞·ªùng l√†m v·ªõi API)
            .authorizeHttpRequests(auth -> auth
                // üëá D√≤ng n√†y cho ph√©p t·∫•t c·∫£ c√°c request ƒë·∫øn /api/auth/** m√† kh√¥ng c·∫ßn x√°c th·ª±c
                .requestMatchers("/api/auth/**").permitAll()
                
                // üëá (T√πy ch·ªçn) Th√™m c√°c ƒë∆∞·ªùng d·∫´n c√¥ng khai kh√°c n·∫øu c·∫ßn
                // .requestMatchers("/public/**", "/swagger-ui/**", "/v3/api-docs/**").permitAll()

                // üëá T·∫•t c·∫£ c√°c request kh√°c ƒë·ªÅu y√™u c·∫ßu x√°c th·ª±c
                .anyRequest().authenticated()
            )
            .sessionManagement(session -> session
                // C·∫•u h√¨nh kh√¥ng s·ª≠ d·ª•ng session (stateless) v√¨ ch√∫ng ta d√πng JWT
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            )
            .authenticationProvider(authenticationProvider)
            // Th√™m JwtAuthFilter v√†o tr∆∞·ªõc filter UsernamePasswordAuthenticationFilter
            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}

