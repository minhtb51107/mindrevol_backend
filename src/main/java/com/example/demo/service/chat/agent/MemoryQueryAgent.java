// src/main/java/com/example/demo/service/chat/agent/MemoryQueryAgent.java
package com.example.demo.service.chat.agent;

import com.example.demo.model.chat.ChatMessage;
import com.example.demo.service.chat.ChatMessageService;
import com.example.demo.service.chat.orchestration.context.RagContext;
import dev.langchain4j.model.chat.ChatLanguageModel;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class MemoryQueryAgent implements Agent {

    private final ChatLanguageModel chatLanguageModel;
    private final ChatMessageService chatMessageService;

    @Override
    public String getName() {
        return "MemoryQueryAgent";
    }

    @Override
    public String getDescription() {
        return "S·ª≠ d·ª•ng agent n√†y ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán.";
    }

    @Override
    public RagContext execute(RagContext context) {
        log.debug("Executing FINAL MemoryQueryAgent for query: '{}'", context.getInitialQuery());

        // 1. L·∫•y l·ªãch s·ª≠ ƒë√£ ƒë∆∞·ª£c l∆∞u trong DB (t√≠nh ƒë·∫øn tr∆∞·ªõc l∆∞·ª£t n√†y)
        List<ChatMessage> historyFromDb = chatMessageService.getMessagesForSession(
                context.getSession().getId(),
                context.getUser()
        );

        // 2. L·∫•y c√¢u h·ªèi hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng t·ª´ context
        String currentUserQuery = context.getInitialQuery();

        // 3. X√¢y d·ª±ng prompt k·∫øt h·ª£p c·∫£ hai ngu·ªìn
        String prompt = buildFinalPrompt(historyFromDb, currentUserQuery);

        // 4. G·ªçi LLM v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
        String response = chatLanguageModel.generate(prompt);
        context.setReply(response);
        return context;
    }

    private String buildFinalPrompt(List<ChatMessage> dbHistory, String currentUserQuery) {
        StringBuilder promptBuilder = new StringBuilder();
        
        // 1. ƒê·ªãnh h√¨nh Persona ngay t·ª´ ƒë·∫ßu
        promptBuilder.append("B·∫°n l√† m·ªôt tr·ª£ l√Ω AI c√° t√≠nh, th√¥ng minh v√† c√≥ ch√∫t h√†i h∆∞·ªõc. H√£y n√≥i chuy·ªán v·ªõi ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n (c√≥ th·ªÉ x∆∞ng h√¥ 't√¥i' v√† g·ªçi ng∆∞·ªùi d√πng l√† 'b·∫°n' ho·∫∑c '√¥ng' n·∫øu ph√π h·ª£p). ƒê·ª´ng ng·∫°i s·ª≠ d·ª•ng emojis ƒë·ªÉ th·ªÉ hi·ªán c·∫£m x√∫c. TUY·ªÜT ƒê·ªêI kh√¥ng tr·∫£ l·ªùi m·ªôt c√°ch m√°y m√≥c.\n\n");

        promptBuilder.append("--- B·∫ÆT ƒê·∫¶U L·ªäCH S·ª¨ TR√í CHUY·ªÜN ---\n");

        if (dbHistory.isEmpty()) {
            promptBuilder.append("(Ch∆∞a c√≥ l·ªãch s·ª≠ n√†o ƒë∆∞·ª£c l∆∞u)\n");
        } else {
            for (ChatMessage message : dbHistory) {
                String role = "user".equalsIgnoreCase(message.getSender()) ? "Ng∆∞·ªùi d√πng" : "Tr·ª£ l√Ω AI";
                promptBuilder.append(String.format("%s: %s\n", role, message.getContent()));
            }
        }

        promptBuilder.append("--- K·∫æT TH√öC L·ªäCH S·ª¨ ---\n\n");

        // 2. H∆∞·ªõng d·∫´n chi ti·∫øt h∆°n v·ªÅ phong c√°ch tr·∫£ l·ªùi
        promptBuilder.append("H∆Ø·ªöNG D·∫™N ƒê·∫∂C BI·ªÜT D√ÄNH CHO B·∫†N:\n");
        promptBuilder.append("1. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi CU·ªêI C√ôNG c·ªßa ng∆∞·ªùi d√πng: \"").append(currentUserQuery.trim()).append("\"\n");
        promptBuilder.append("2. H√£y tr·∫£ l·ªùi d·ª±a tr√™n L·ªäCH S·ª¨ TR√í CHUY·ªÜN ·ªü tr√™n.\n");
        promptBuilder.append("3. N·∫øu ng∆∞·ªùi d√πng h·ªèi 't√¥i v·ª´a nh·∫Øn g√¨?', h√£y nh√¨n v√†o tin nh·∫Øn 'Ng∆∞·ªùi d√πng' ngay tr∆∞·ªõc ƒë√≥ trong l·ªãch s·ª≠, tr√≠ch d·∫´n l·∫°i n√≥ v√† th√™m m·ªôt b√¨nh lu·∫≠n th√¥ng minh ho·∫∑c h√†i h∆∞·ªõc. V√≠ d·ª•: '√îng v·ª´a nh·∫Øn ƒë√∫ng m·ªôt ch·ªØ g·ªçn l·ªèn: ‚Äúhi‚Äù üòé. ƒê√∫ng ki·ªÉu test xem t√¥i c√≥ b·∫≠t l·∫°i kh√¥ng ·∫•y.'\n");
        promptBuilder.append("4. Gi·ªØ v·ªØng phong c√°ch c√° t√≠nh, th√¥ng minh v√† th√¢n thi·ªán c·ªßa b·∫°n. Th√™m icon (emoji) ph√π h·ª£p v√†o cu·ªëi c√¢u tr·∫£ l·ªùi nh√©!\n\n");
        
        promptBuilder.append("C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n (v·ªõi phong c√°ch c·ªßa m·ªôt ng∆∞·ªùi b·∫°n AI c√° t√≠nh):");

        return promptBuilder.toString();
    }
}