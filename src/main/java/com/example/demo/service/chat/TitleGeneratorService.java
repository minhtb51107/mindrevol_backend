package com.example.demo.service.chat;

import java.nio.file.AccessDeniedException;
import java.util.Collections;
import java.util.List;

import org.springframework.stereotype.Service;

import com.example.demo.model.auth.User;
import com.example.demo.model.chat.ChatMessage;
import com.example.demo.model.chat.ChatSession;
import com.example.demo.repository.chat.ChatMessageRepository;
import com.example.demo.repository.chat.ChatSessionRepository;
// import com.example.demo.service.chat.integration.OpenAIService; // üî• ƒê√É X√ìA
import dev.langchain4j.model.chat.ChatLanguageModel; // ‚úÖ TH√äM M·ªöI

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class TitleGeneratorService {
    private final ChatSessionRepository sessionRepo;
    private final ChatMessageRepository messageRepo;
    // private final OpenAIService openAIService; // üî• ƒê√É X√ìA
    
    private final ChatLanguageModel chatLanguageModel; // ‚úÖ THAY TH·∫æ (Bean n√†y ƒë√£ c√≥ t·ª´ LangChain4jConfig)

    public String generateAITitle(Long sessionId, User user) throws AccessDeniedException {
        ChatSession session = sessionRepo.findById(sessionId)
            .orElseThrow(() -> new IllegalArgumentException("Session kh√¥ng t·ªìn t·∫°i"));

        if (!session.getUser().getId().equals(user.getId())) {
            throw new AccessDeniedException("Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p session n√†y");
        }

        // L·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t (ƒë√£ s·∫Øp x·∫øp theo th·ªùi gian)
        List<ChatMessage> recentMessages = messageRepo
            .findTop5ByChatSessionIdOrderByTimestampDesc(sessionId);
        
        // ƒê·∫£o ng∆∞·ª£c danh s√°ch ƒë·ªÉ c√≥ th·ª© t·ª± chronological (c≈© -> m·ªõi) cho AI
        Collections.reverse(recentMessages);

        // T·∫°o prompt cho AI
        StringBuilder conversationContext = new StringBuilder();
        conversationContext.append("N·ªôi dung tr√≤ chuy·ªán:\n");
        
        for (ChatMessage msg : recentMessages) {
            String role = msg.getSender().equalsIgnoreCase("USER") ? "Ng∆∞·ªùi d√πng" : "AI";
            conversationContext.append(role).append(": ").append(msg.getContent()).append("\n");
        }

        // ‚úÖ T·∫†O PROMPT DUY NH·∫§T CHO LANGCHAIN4J
        String finalPrompt = "B·∫°n l√† tr·ª£ l√Ω t·∫°o ti√™u ƒë·ªÅ. H√£y tr·∫£ l·ªùi CH·ªà b·∫±ng m·ªôt ti√™u ƒë·ªÅ th·∫≠t ng·∫Øn g·ªçn (t·ªëi ƒëa 5 t·ª´) b·∫±ng ti·∫øng Vi·ªát cho cu·ªôc tr√≤ chuy·ªán sau. Kh√¥ng gi·∫£i th√≠ch, kh√¥ng d√πng d·∫•u ngo·∫∑c k√©p.\n\n" 
                            + conversationContext.toString();

        try {
            // ‚úÖ G·ªåI INTERFACE TR·ª™U T∆Ø·ª¢NG
            String aiTitle = chatLanguageModel.generate(finalPrompt);
            
            // L√†m s·∫°ch k·∫øt qu·∫£
            aiTitle = cleanAITitle(aiTitle);
            
            // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
            session.setTitle(aiTitle);
            sessionRepo.save(session);
            
            log.info("ƒê√£ t·∫°o ti√™u ƒë·ªÅ AI cho session {}: {}", sessionId, aiTitle);
            return aiTitle;

        } catch (Exception e) {
            // L·ªói n√†y (v√≠ d·ª•: API key sai) gi·ªù s·∫Ω ƒë∆∞·ª£c b·∫Øt l·∫°i m·ªôt c√°ch an to√†n
            log.error("Kh√¥ng th·ªÉ t·∫°o ti√™u ƒë·ªÅ AI do l·ªói: {}", e.getMessage());
            // Tr·∫£ v·ªÅ ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh thay v√¨ l√†m s·∫≠p ·ª©ng d·ª•ng
            String defaultTitle = "Cu·ªôc tr√≤ chuy·ªán m·ªõi";
            session.setTitle(defaultTitle);
            sessionRepo.save(session);
            return defaultTitle;
        }
    }
    
    private String cleanAITitle(String rawTitle) {
        if (rawTitle == null) return "Cu·ªôc tr√≤ chuy·ªán";
        
        // Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p v√† c√°c k√Ω t·ª± kh√¥ng mong mu·ªën
        String cleaned = rawTitle.replace("\"", "")
                                 .replace("*", "")
                                 .replace("Ti√™u ƒë·ªÅ:", "")
                                 .trim();
        
        // Gi·ªõi h·∫°n ƒë·ªô d√†i t·ªëi ƒëa
        return cleaned.length() > 50 ? cleaned.substring(0, 50) : cleaned;
    }
}