package com.example.demo.service.document;

import com.example.demo.dto.chat.DocumentInfoDTO;
import com.example.demo.model.auth.User;
import com.example.demo.repository.chat.KnowledgeRepository;

import dev.langchain4j.data.document.Document;
import dev.langchain4j.data.document.DocumentParser;
import dev.langchain4j.data.document.loader.FileSystemDocumentLoader;
import dev.langchain4j.data.document.parser.apache.tika.ApacheTikaDocumentParser;
import dev.langchain4j.data.document.splitter.DocumentSplitters;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class DocumentIngestionService {

    // Inject c√°c th√†nh ph·∫ßn tr·ª´u t∆∞·ª£ng ƒë√£ t·ªìn t·∫°i
    private final EmbeddingModel embeddingModel;
    private final EmbeddingStore<TextSegment> embeddingStore;
    private final FileProcessingService fileProcessingService; // ‚úÖ TH√äM M·ªöI
    private final KnowledgeRepository knowledgeRepository; // ‚úÖ TH√äM M·ªöI   
    /**
     * ‚úÖ H√ÄM M·ªöI: L·∫•y danh s√°ch file trong kho tri th·ª©c
     */
    public List<DocumentInfoDTO> listDocuments(User user) {
        return knowledgeRepository.listDocumentsForUser(user.getId());
    }

    /**
     * ‚úÖ H√ÄM M·ªöI: X√≥a m·ªôt file kh·ªèi kho tri th·ª©c
     */
    public int deleteDocument(String fileName, User user) {
        log.info("Y√™u c·∫ßu x√≥a file {} c·ªßa user {}", fileName, user.getEmail());
        int deletedCount = knowledgeRepository.deleteDocument(fileName, user.getId());
        log.info("ƒê√£ x√≥a {} m·∫©u tin (chunks) c·ªßa file {}", deletedCount, fileName);
        return deletedCount;
    }

    // üî• H√ÄM N√ÄY B·ªä X√ìA (ƒë√£ ƒë∆∞·ª£c thay b·∫±ng ingestSingleDocument)
    // public void ingestDocument(MultipartFile multipartFile, User user) throws IOException { ... }
    
    /**
     * ‚úÖ H√ÄM M·ªöI: Nh·∫≠n m·ªôt danh s√°ch file v√† x·ª≠ l√Ω tu·∫ßn t·ª±
     */
    public void ingestDocuments(List<MultipartFile> files, User user) {
        log.info("B·∫Øt ƒë·∫ßu n·∫°p {} file cho user {}", files.size(), user.getEmail());
        
        for (MultipartFile file : files) {
            try {
                // G·ªçi h√†m x·ª≠ l√Ω 1 file (ƒë√£ ƒë·ªïi t√™n)
                this.ingestSingleDocument(file, user);
            } catch (Exception e) {
                // Ghi log l·ªói cho file c·ª• th·ªÉ nh∆∞ng v·∫´n ti·∫øp t·ª•c v·ªõi c√°c file kh√°c
                log.error("L·ªói khi n·∫°p file {} cho user {}: {}", 
                           file.getOriginalFilename(), user.getEmail(), e.getMessage());
            }
        }
        log.info("Ho√†n t·∫•t n·∫°p {} file cho user {}", files.size(), user.getEmail());
    }

    /**
     * N·∫°p file v√†o KHO TRI TH·ª®C L√ÇU D√ÄI (docType = 'knowledge')
     */
    public void ingestSingleDocument(MultipartFile multipartFile, User user) throws IOException {
        
        File tempFile = null;
        
        try {
        	tempFile = fileProcessingService.convertMultiPartToFile(multipartFile);
            
            // 1. T·∫£i document g·ªëc
            Document originalDocument = fileProcessingService.loadDocument(tempFile);
            String originalContent = originalDocument.text();
            String fileName = multipartFile.getOriginalFilename();

            // 2. T·∫†O N·ªòI DUNG M·ªöI: Th√™m t√™n file v√†o ƒë·∫ßu vƒÉn b·∫£n
            String newContent = String.format(
                "ƒê√¢y l√† n·ªôi dung tr√≠ch t·ª´ file c√≥ t√™n: '%s'\n\n%s",
                fileName,
                originalContent
            );

            // 3. T·∫°o document m·ªõi v·ªõi n·ªôi dung ƒë√£ s·ª≠a ƒë·ªïi
            Document document = Document.from(newContent, originalDocument.metadata());
            
            // 4. Th√™m metadata
            document.metadata().add("userId", user.getId().toString());
            document.metadata().add("docType", "knowledge"); // ‚úÖ <--- TRI TH·ª®C L√ÇU D√ÄI
            document.metadata().add("fileName", fileName);

            // 5. N·∫°p
            EmbeddingStoreIngestor ingestor = EmbeddingStoreIngestor.builder()
                    .documentSplitter(DocumentSplitters.recursive(500, 100))
                    .embeddingModel(embeddingModel)
                    .embeddingStore(embeddingStore)
                    .build();
            
            ingestor.ingest(document);
            log.info("ƒê√£ n·∫°p th√†nh c√¥ng file (knowledge) {} cho user {}", multipartFile.getOriginalFilename(), user.getEmail());

        } finally {
            fileProcessingService.deleteTempFile(tempFile);
        }
    }

    /**
     * ‚úÖ H√ÄM M·ªöI: N·∫°p file T·∫†M TH·ªúI cho RAG (docType = 'temp_file')
     * Ch·ªâ t·ªìn t·∫°i trong ph·∫°m vi c·ªßa cu·ªôc tr√≤ chuy·ªán.
     */
    public void ingestTemporaryFile(MultipartFile multipartFile, User user, Long sessionId, String tempFileId) throws IOException {
        
        File tempFile = null;
        
        try {
        	tempFile = fileProcessingService.convertMultiPartToFile(multipartFile);
            
            // 1. T·∫£i document g·ªëc
            Document originalDocument = fileProcessingService.loadDocument(tempFile);
            String originalContent = originalDocument.text();
            String fileName = multipartFile.getOriginalFilename();

            // 2. T·∫†O N·ªòI DUNG M·ªöI: Th√™m t√™n file v√†o ƒë·∫ßu vƒÉn b·∫£n
            String newContent = String.format(
                "ƒê√¢y l√† n·ªôi dung tr√≠ch t·ª´ file t·∫°m th·ªùi c√≥ t√™n: '%s'\n\n%s",
                fileName,
                originalContent
            );

            // 3. T·∫°o document m·ªõi v·ªõi n·ªôi dung ƒë√£ s·ª≠a ƒë·ªïi
            Document document = Document.from(newContent, originalDocument.metadata());
            
            // 4. Th√™m metadata T·∫†M TH·ªúI
            document.metadata().add("userId", user.getId().toString()); // V·∫´n c·∫ßn ƒë·ªÉ ph√¢n quy·ªÅn
            document.metadata().add("docType", "temp_file");    // ‚úÖ <--- LO·∫†I FILE T·∫†M TH·ªúI
            document.metadata().add("fileName", fileName);
            document.metadata().add("sessionId", sessionId.toString()); // ‚úÖ G·∫Øn v√†o session
            document.metadata().add("tempFileId", tempFileId); // ‚úÖ G·∫Øn ID file duy nh·∫•t

            // 5. N·∫°p
            EmbeddingStoreIngestor ingestor = EmbeddingStoreIngestor.builder()
                    .documentSplitter(DocumentSplitters.recursive(500, 100))
                    .embeddingModel(embeddingModel)
                    .embeddingStore(embeddingStore)
                    .build();
            
            ingestor.ingest(document);
            log.info("ƒê√£ n·∫°p th√†nh c√¥ng file (temporary) {} cho session {}", fileName, sessionId);

        } finally {
            fileProcessingService.deleteTempFile(tempFile);
        }
    }


    // Helper ƒë·ªÉ chuy·ªÉn MultipartFile sang File (b·ªã l·∫∑p, c√≥ th·ªÉ x√≥a n·∫øu FileProcessingService ƒë∆∞·ª£c inject)
    private File convertMultiPartToFile(MultipartFile file) throws IOException {
        File convFile = File.createTempFile(file.getOriginalFilename(), ".tmp");
        try (FileOutputStream fos = new FileOutputStream(convFile);
             InputStream is = file.getInputStream()) {
            is.transferTo(fos);
        }
        return convFile;
    }
}